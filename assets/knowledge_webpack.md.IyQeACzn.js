import{_ as e,c as l,o,a2 as a}from"./chunks/framework.BTj4N_c1.js";const k=JSON.parse('{"title":"webpack","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/webpack.md","filePath":"knowledge/webpack.md"}'),c={name:"knowledge/webpack.md"},i=a('<h1 id="webpack" tabindex="-1">webpack <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;webpack&quot;">​</a></h1><p>下面是常见的 <code>webpack</code> 知识点：</p><h2 id="_1-webpack-概念-⭐" tabindex="-1">1. webpack 概念 ⭐ <a class="header-anchor" href="#_1-webpack-概念-⭐" aria-label="Permalink to &quot;1. webpack 概念 ⭐&quot;">​</a></h2><blockquote><p><code>webpack</code> 是一个前端的打包工具，可以打包各种资源，如：<code>JS</code>、<code>CSS</code>、图片、字体等。</p></blockquote><h3 id="解决痛点" tabindex="-1">解决痛点 <a class="header-anchor" href="#解决痛点" aria-label="Permalink to &quot;解决痛点&quot;">​</a></h3><blockquote><p>为了解决哪个痛点，才有 webpack ?</p></blockquote><p>如果像以前开发时一个 html 文件可能会引用十几个 js 文件,而且顺序还不能乱，因为它们存在依赖关系，同时对于 ES6+ 等新的语法，less, sass 等 CSS 预处理都不能很好的解决……，此时就需要一个处理这些问题的工具。</p><h3 id="基本功能" tabindex="-1">基本功能 <a class="header-anchor" href="#基本功能" aria-label="Permalink to &quot;基本功能&quot;">​</a></h3><ul><li><strong>代码压缩（文件优化）</strong>：将 <code>JS</code>、<code>CSS</code> 代码混淆压缩，减小代码体积，提高加载速度</li><li><strong>编译语法（代码转化）</strong>：对于无法被浏览器直接识别的语法，如 <code>Less</code>、<code>Sass</code>、<code>ES6</code>、<code>TypeScript</code> 等，<code>webpack</code> 可以配合相应的加载器和插件进行编译和转换。</li><li><strong>处理模块化</strong>：<code>webpack</code> 能够处理 <code>JS</code>、<code>CSS</code> 的模块化语法，将它们编译为浏览器可识别的形式。</li><li><strong>自动刷新</strong>：监听本地源代码的变化，自动构建，刷新浏览器</li><li><strong>代码校验</strong>：在代码被提交到仓库前需要检测代码是否符合规范，以及单元测试是否通过</li><li><strong>自动发布</strong>：更新完代码后，自动构建出线上发布代码并传输给发布系统。</li></ul><h3 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h3><p>它做的事情是，分析你的项目结构，找到 <code>JavaScript</code> 模块以及其它的一些浏览器不能直接运行的拓展语言（<code>Sass</code>，<code>TypeScript</code>等），并将其转换和打包为合适的格式供浏览器使用。在 3.0 出现后，<code>webpack</code> 还肩负起了优化项目的责任。</p><h3 id="打包原理" tabindex="-1">打包原理 <a class="header-anchor" href="#打包原理" aria-label="Permalink to &quot;打包原理&quot;">​</a></h3><ul><li><strong>把一切都视为模块</strong>：不管是 css、JS、Image 还是 html 都可以互相引用，通过定义 entry.js，对所有依赖的文件进行跟踪，将各个模块通过 <code>loader</code> 和 <code>plugins</code> 处理，然后打包在一起。</li><li><strong>按需加载</strong>：打包过程中 webpack 通过 <code>Code Splitting</code> 功能将文件分为多个 <code>chunks</code>，还可以将重复的部分单独提取出来作为 <code>commonChunk</code>，从而实现按需加载。把所有依赖打包成一个 <code>bundle.js</code> 文件，通过代码分割成单元片段并按需加载</li></ul><h3 id="核心概念-属性" tabindex="-1">核心概念（属性） <a class="header-anchor" href="#核心概念-属性" aria-label="Permalink to &quot;核心概念（属性）&quot;">​</a></h3><ul><li><strong>entry</strong>：入口，指示 webpack 以哪个文件为入口起点开始打包，分析构建内部依赖图</li><li><strong>output</strong>：出口，指示 webpack 打包后的资源 <code>bundles</code> 输出到哪里去，以及如何命名，默认为 <code>./dist</code></li><li><strong>loader</strong>：转换器，用于把模块原内容按照需求转换成新内容。</li><li><strong>plugins</strong>：插件，在 webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情</li><li><strong>module</strong>：模块，在 webpack 里一切皆模块，一个模块对应着一个文件。webpack 会从配置的 <code>entry</code> 开始递归找出所有依赖的模块。</li></ul><h2 id="_2-webpack-loader-⭐" tabindex="-1">2. webpack Loader ⭐ <a class="header-anchor" href="#_2-webpack-loader-⭐" aria-label="Permalink to &quot;2. webpack Loader ⭐&quot;">​</a></h2><p>以下是常用的 <code>Loader</code> :</p><h3 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h3><ul><li><code>style-loader</code>：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS。</li><li><code>css-loader</code>：加载 CSS，支持模块化、压缩、文件导入等特性</li><li><code>less-loader</code>：把 Less 代码转换成 CSS</li><li><code>sass-loader</code>：把 Scss、Sass 代码转换成 CSS</li><li><code>postcss-loader</code>：扩展 CSS 语法，使用下一代 CSS，可以配合 autoprefixer 插件自动补齐 CSS3 前缀</li></ul><h3 id="file" tabindex="-1">File <a class="header-anchor" href="#file" aria-label="Permalink to &quot;File&quot;">​</a></h3><ul><li><code>file-loader</code>：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件</li><li><code>image-loader</code>：加载并且压缩图片文件</li><li><code>svg-inline-loader</code>：将压缩后的 SVG 内容注入代码中</li><li><code>url-loader</code>：把文件转换成 base64 编码，通过 data URI 来引用转换后的文件</li><li><code>json-loader</code> 加载 JSON 文件（默认包含）</li><li><code>source-map-loader</code>：加载额外的 Source Map 文件，以方便断点调试</li></ul><h3 id="js" tabindex="-1">JS <a class="header-anchor" href="#js" aria-label="Permalink to &quot;JS&quot;">​</a></h3><ul><li><code>babel-loader</code>：将 ES6 转换成 ES5</li><li><code>ts-loader</code>: 将 TypeScript 转换成 JavaScript</li><li><code>awesome-typescript-loader</code>：将 TypeScript 转换成 JavaScript，性能优于 ts-loader</li><li><code>vue-loader</code>：加载 Vue.js 单文件组件</li></ul><h3 id="校验" tabindex="-1">校验 <a class="header-anchor" href="#校验" aria-label="Permalink to &quot;校验&quot;">​</a></h3><ul><li><code>eslint-loader</code>：通过 ESLint 检查 JavaScript 代码</li><li><code>tslint-loader</code>：通过 TSLint检查 TypeScript 代码</li></ul><h3 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h3><ul><li><code>mocha-loader</code>：加载 Mocha 测试用例的代码</li><li><code>coverjs-loader</code>：计算测试的覆盖率</li></ul><blockquote><p>更多见官网：<a href="https://webpack.docschina.org/loaders/" target="_blank" rel="noreferrer">Loaders | webpack 中文文档</a></p></blockquote><h2 id="_3-webpack-plugin-⭐" tabindex="-1">3. webpack Plugin ⭐ <a class="header-anchor" href="#_3-webpack-plugin-⭐" aria-label="Permalink to &quot;3. webpack Plugin ⭐&quot;">​</a></h2><p>以下是常用的 <code>Plugin</code> :</p><ul><li><code>HotModuleReplacementPlugin</code>：模块热更新插件。(依赖于 webpack-dev-server)</li><li><code>html-webpack-plugin</code>：简化 HTML 文件创建 (依赖于 html-loader)</li><li><code>clean-webpack-plugin</code>：打包前清理上次项目生成的 bundle 文件</li><li><code>ignore-plugin</code>：忽略第三方包指定目录，制定目录不打包</li><li><code>define-plugin</code>：定义全局变量</li><li><code>copy-webpack-plugin</code>：复制文件到指定目录</li><li><code>mini-css-extract-plugin</code>：提取 CSS 到单独文件，支持按需加载</li><li><code>optimize-css-assets-webpack-plugin</code>：压缩和优化 CSS</li><li><code>uglifyjs-webpack-plugin</code>：webpack4 以前 压缩 JS（不支持 ES6）</li><li><code>terser-webpack-plugin</code>：webpack4 压缩 JS（支持ES6）</li><li><code>compression-webpack-plugin</code>：压缩资源</li><li><code>speed-measure-webpack-plugin</code>：分析打包速度</li></ul><blockquote><p>更多见官网：<a href="https://webpack.docschina.org/plugins/" target="_blank" rel="noreferrer">Plugins | webpack 中文文档</a></p></blockquote><h2 id="_4-loader-plugin-区别-⭐" tabindex="-1">4. Loader Plugin 区别 ⭐ <a class="header-anchor" href="#_4-loader-plugin-区别-⭐" aria-label="Permalink to &quot;4. Loader Plugin 区别 ⭐&quot;">​</a></h2><table><thead><tr><th></th><th>本质</th><th>在哪配置</th><th>配置字段</th><th>运行时机</th></tr></thead><tbody><tr><td>Loader</td><td><code>函数</code></td><td><code>module.rules</code> 字段</td><td>数组（<code>对象</code>）</td><td>打包文件前（预处理）</td></tr><tr><td>Plugin</td><td><code>插件</code></td><td><code>plugins</code> 字段</td><td>数组（<code>实例</code>）</td><td>整个编译周期</td></tr></tbody></table><blockquote><p>共同点： 两者都是为了扩展 webpack 的功能。</p></blockquote><h2 id="_5-webpack-构建流程-⭐" tabindex="-1">5. webpack 构建流程 ⭐ <a class="header-anchor" href="#_5-webpack-构建流程-⭐" aria-label="Permalink to &quot;5. webpack 构建流程 ⭐&quot;">​</a></h2><img src="https://pcsdata.baidu.com/thumbnail/67b7caf54q77532a2e95e4fd28c9d3de?fid=3471640123-16051585-1124148084085886&amp;rt=pr&amp;sign=FDTAER-yUdy3dSFZ0SVxtzShv1zcMqd-ju35PsyAu2W9DgHHgBjYMfihgKU%3D&amp;expires=2h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=393765110463796629&amp;dp-callid=0&amp;time=1714093200&amp;bus_no=26&amp;size=c1600_u1600&amp;quality=100&amp;vuk=-&amp;ft=video" width="100%"><ul><li><code>初始化参数</code>：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数</li><li><code>开始编译</code>：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译</li><li><code>确定入口</code>：根据配置中的 entry 找出所有的入口文件</li><li><code>编译模块</code>：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理</li><li><code>完成模块编译</code>：在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系</li><li><code>输出资源</code>：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会</li><li><code>输出完成</code>：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</li></ul><h2 id="_6-webpack-打包优化-⭐" tabindex="-1">6. webpack 打包优化 ⭐ <a class="header-anchor" href="#_6-webpack-打包优化-⭐" aria-label="Permalink to &quot;6. webpack 打包优化 ⭐&quot;">​</a></h2><ul><li><p><code>使用代码分割</code> (Code Splitting)：</p><ul><li>使用 import() 语法动态导入模块，webpack 会自动进行代码分割。</li><li>使用 SplitChunksPlugin 插件来进一步分割公共代码。</li></ul></li><li><p><code>压缩和优化输出文件</code></p><ul><li>使用 TerserPlugin 插件来压缩 JavaScript 代码。</li><li>使用 OptimizeCSSAssetsPlugin 或 cssnano 来压缩 CSS 代码。</li><li>使用 compression-webpack-plugin 插件来压缩输出的 gzip 或 brotli 文件。</li></ul></li><li><p><code>利用缓存</code></p><ul><li>使用 cache-loader 或 webpack 内置的持久化缓存来缓存已编译的模块，减少重新编译的时间。</li><li>使用 hard-source-webpack-plugin 来缓存构建结果，进一步提高速度。</li></ul></li><li><p><code>优化加载器</code> (Loaders)</p><ul><li>尽量减少使用加载器，尤其是那些处理大文件的加载器。</li><li>使用 exclude 和 include 选项来限制加载器处理的文件范围。</li><li>使用 thread-loader 或 happypack 来并行处理加载器任务。</li></ul></li><li><p><code>减少解析模块</code></p><ul><li>使用 resolve.modules 来指定查找模块的目录，减少 webpack 的搜索范围。</li><li>使用 resolve.extensions 来减少扩展名的尝试，例如只解析 .js 和 .jsx 文件。</li><li>使用 resolve.alias 来为模块创建别名，简化模块引用。</li></ul></li><li><p><code>使用 DLL Plugin</code></p><ul><li>使用 DllPlugin 和 DllReferencePlugin 来将特定的依赖库与业务代码分离，减少构建时间。</li></ul></li><li><p><code>Tree Shaking</code></p><ul><li>利用 ES6 模块的特性，webpack 可以在打包时去除未引用的代码，实现 Tree Shaking。确保你的项目配置正确支持这一特性。</li></ul></li><li><p><code>优化依赖</code></p><ul><li>定期更新和审查项目的依赖，确保使用最新和最有效的库。</li><li>使用 webpack-bundle-analyzer 插件来分析打包后的文件，找出可能的问题和优化点。</li></ul></li><li><p><code>使用更快的硬件和文件系统</code></p><ul><li>使用 SSD 而不是 HDD 来提高文件读写速度。</li><li>增加内存或使用更快的 CPU 可以提高构建速度。</li></ul></li><li><p><code>其他插件和工具</code></p><ul><li>使用 speed-measure-webpack-plugin 来分析构建过程中各个步骤的耗时，找出性能瓶颈。</li><li>考虑使用其他构建工具或配置，如 vite 或 esbuild，它们在某些场景下可能比 webpack 更高效。</li></ul></li></ul><blockquote><p>更多参考官网：<a href="https://www.webpackjs.com/guides/build-performance/" target="_blank" rel="noreferrer">构建性能|webpack 中文文档</a></p></blockquote><h2 id="_7-hmr-热更新-⭐" tabindex="-1">7. HMR 热更新 ⭐ <a class="header-anchor" href="#_7-hmr-热更新-⭐" aria-label="Permalink to &quot;7. HMR 热更新 ⭐&quot;">​</a></h2><p>webpack 的热更新又称热替换（<code>Hot Module Replacement</code>），缩写为 <code>HMR</code>。这个机制可以做到不用刷新浏览器而将新变更的模块替换掉旧的模块。</p><h3 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h3><p>通过监视源代码的更改（<code>chunk diff</code>），如 JavaScript、CSS 等。实际上 WDS 与浏览器之间维护了一个 <code>Websocket</code>，当本地资源发生变化时，WDS 会向浏览器推送更新，并带上构建时的 hash，让客户端与上一次资源进行对比。客户端对比出差异后会向 WDS 发起 <code>Ajax</code> 请求来获取更改内容(文件列表、hash)，这样客户端就可以再借助这些信息继续向 WDS 发起 <code>jsonp</code> 请求获取该 chunk 的增量更新。</p><p>后续的部分(拿到增量更新之后如何处理？哪些状态该保留？哪些又需要更新？)由 <code>HotModulePlugin</code> 来完成，提供了相关 API 以供开发者针对自身场景进行处理，像 <code>react-hot-loader</code> 和 <code>vue-loader</code> 都是借助这些 API 实现 HMR。</p><h2 id="_8-tree-shaking" tabindex="-1">8. Tree Shaking <a class="header-anchor" href="#_8-tree-shaking" aria-label="Permalink to &quot;8. Tree Shaking&quot;">​</a></h2><p>Tree Shaking 是一种通过清除无用代码来减少最终打包文件大小的优化技术。</p><h3 id="原理-1" tabindex="-1">原理 <a class="header-anchor" href="#原理-1" aria-label="Permalink to &quot;原理&quot;">​</a></h3><ul><li><code>静态导入分析</code>：Tree Shaking 的核心是对 <code>ES6</code> 模块的静态结构进行分析。<code>ES6</code> 模块的导入（import）和导出（export）语句是静态的，这意味着它们不可以在运行时改变。这种静态性使得打包工具能够在构建阶段确定每个模块是否被使用。</li><li><code>标记未使用代码</code>：在构建过程中，打包工具会分析代码，标记所有未被使用的模块或导出。这一过程依赖于代码的依赖树。</li><li><code>移除未使用代码</code>：在最后的打包阶段，所有被标记为未使用的代码会被移除。这通常是通过压缩工具（如 Terser）实现的，这些工具能够移除未被引用的代码。</li></ul><h2 id="_9-source-map" tabindex="-1">9. Source Map <a class="header-anchor" href="#_9-source-map" aria-label="Permalink to &quot;9. Source Map&quot;">​</a></h2><p><code>Source Map</code> 是将编译、打包、压缩后的代码映射回源代码的过程。打包压缩后的代码不具备良好的可读性，想要调试源码就需要 <code>Source Map</code>。</p><blockquote><p>map 文件只要不打开开发者工具，浏览器是不会加载的。</p></blockquote><p>线上环境一般有三种处理方案：</p><ul><li><code>hidden-source-map</code>：借助第三方错误监控平台 Sentry 使用</li><li><code>nosources-source-map</code>：只会显示具体行数以及查看源代码的错误栈。安全性比 sourcemap 高</li><li><code>sourcemap</code>：通过 nginx 设置将 .map 文件只对白名单开放(公司内网)</li></ul><blockquote><p>注意的是：避免在生产中使用 inline- 和 eval- ，因为它们会增加 bundle 体积大小，并降低整体性能。</p></blockquote><h2 id="_10-babel-⭐" tabindex="-1">10. Babel ⭐ <a class="header-anchor" href="#_10-babel-⭐" aria-label="Permalink to &quot;10. Babel ⭐&quot;">​</a></h2><p>Babel 是将 ES6 及以上版本的代码转换为 ES5 的工具。</p><h3 id="原理-2" tabindex="-1">原理 <a class="header-anchor" href="#原理-2" aria-label="Permalink to &quot;原理&quot;">​</a></h3><blockquote><p>AST：虚拟语法树（Abstract Syntax Tree）</p></blockquote><ul><li><ol><li><code>解析</code>：将代码转换成 AST</li></ol><ul><li>词法分析：将代码(字符串)分割为token流，即语法单元成的数组</li><li>语法分析：分析 token 流(上面生成的数组)并生成 AST</li></ul></li><li><ol start="2"><li><code>转换</code></li></ol><ul><li>访问 AST 的节点进行变换操作生产新的 AST</li></ul></li><li><ol start="3"><li><code>生成</code></li></ol><ul><li>以新的 AST 为基础生成代码</li></ul></li></ul><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><ul><li><ol><li><code>语言特性转换</code>：将 ES6+ 代码转换为更广泛兼容的 ES5 代码。</li></ol></li><li><ol start="2"><li><code>浏览器兼容性</code>：确保 JavaScript 代码可以在旧版浏览器上运行。</li></ol></li><li><ol start="3"><li><code>React 开发</code>：转换 JSX 代码为普通的 JavaScript。</li></ol></li></ul>',63),d=[i];function r(t,p,n,s,u,h){return o(),l("div",null,d)}const S=e(c,[["render",r]]);export{k as __pageData,S as default};
